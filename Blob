using AppLibrary;
using Microsoft.Azure.WebJobs;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

namespace fn_ResourceTagger
{
    public class fn_ResourceTagger_Blob
    {
        private static readonly string COST_MANAGEMENT_URL = Environment.GetEnvironmentVariable("COST_MANAGEMENT_URL");
        private static DataTable dt_costtable;
        private static DataTable dt_RSTagger;
        private static ILogger _log;

        [FunctionName("ResourceTagger_Blob")]
        public static async Task Run([BlobTrigger("costexportmanual/{name}.xlsx", Connection = "BLOB_URI")] Stream myBlob, string name, ILogger log)
        {
            Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
            _log = log;
            try
            {

                bool costReport = await GetCostDetails("Audit_AME_Preprod");
                bool resourceData = await GetResourceTaggerData();
                if (costReport && resourceData)
                {
                    CleanDataTable(ref dt_costtable, "dt_CostTable");
                    CleanDataTable(ref dt_RSTagger, "dt_RSTagger");

                    if (Convert.ToBoolean(Environment.GetEnvironmentVariable("BROADCAST_RESOURCE_DETAILS")))
                    {
                        var dt_result = GetNewlyCreatedResource();
                        if (dt_result.Rows.Count > 0)
                        {
                            CleanDataTable(ref dt_result, "dt_NewResourceTable");
                            await SendMessageOnTeams(dt_result);
                        }
                        else
                        {
                            _log.LogInformation($"No New Resource Group Found");
                        }

                    }
                    _log.LogInformation($"C# Blob trigger function Processed blob\n File_Name:{name} \n File_Size: {myBlob.Length} Bytes");
                }
               
            }
            catch (Exception ex)
            {
                _log.LogInformation($"Exception Message: {ex.Message}");
            }
        }

        private static async Task<bool> GetCostDetails(string env)
        {
            _log.LogInformation("Fetching CostReport Data");
            string accessToken = await GetAccessToken();
            if (string.IsNullOrEmpty(accessToken))
            {
                throw new Exception("Invalid AccessToken");
            }

            var generic = new GenericClass();
            var newdata = generic.GetRequestBody();
            var content = new StringContent(newdata, Encoding.UTF8, "application/json");

            using (var client = new HttpClient())
            {
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
                client.DefaultRequestHeaders.Add("X-Ms-Command-Name", "CostAnalysis");

                try
                {
                    var response = await client.PostAsync(COST_MANAGEMENT_URL.Replace("{Environment}", env), content).ConfigureAwait(false);

                    if (response.IsSuccessStatusCode)
                    {
                        var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                        var result = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var costAnalysis = System.Text.Json.JsonSerializer.Deserialize<CostAnalysis>(result, options);
                        _log.LogInformation("Fetched Cost Report Data..");
                        return await CreateCostReport(costAnalysis);
                    }
                    else
                    {
                        return false;
                    }
                }
                catch
                {
                    throw;
                }
            }

        }

        private static async Task<string> GetAccessToken()
        {
            try
            {
                var helper = new Helper();
                _log.LogInformation("Getting Access Token....");
                var accessToken = await helper.GetAccessToken();
                _log.LogInformation($"Token acquired, Length {accessToken.Length}....");
                return accessToken;
            }
            catch
            {
                throw;
            }

        }

        private static async Task<bool> CreateCostReport(CostAnalysis _obj)
        {
            try
            {
                _log.LogInformation("Creating CostReport....");
                dt_costtable = new DataTable();
                var sb = new StringBuilder();

                // Add columns to DataTable and append column names to StringBuilder
                var columnNames = _obj.Properties.Columns.Select(col => col.Name).ToArray();
                foreach (var colName in columnNames)
                {
                    dt_costtable.Columns.Add(new DataColumn(colName));
                }
                sb.AppendLine(string.Join(",", columnNames));

                // Add rows to DataTable and append row values to StringBuilder
                foreach (var row in _obj.Properties.Rows)
                {
                    var dr = dt_costtable.NewRow();
                    for (int j = 0; j < row.Length; j++)
                    {
                        dr[j] = row[j].ToString();
                    }
                    dt_costtable.Rows.Add(dr);
                    sb.AppendLine(string.Join(",", row.Select(cell => cell.ToString())));
                }
                await UploadFileToBlob(Encoding.ASCII.GetBytes(sb.ToString()));
                return true;
            }
            catch
            {
                throw;
            }
        }

        private static async Task<bool> UploadFileToBlob(byte[] buffer)
        {
            string fileName = DateTime.Today.AddDays(-1).ToString("yyyy-MM-dd") + ".csv";
            try
            {
                _log.LogInformation($"Uploading File {fileName} to blob");
                var blobhelper = new BlobHelper();
                return await blobhelper.UploadFileToBlobAsync(buffer, fileName);

            }
            catch
            {
                _log.LogInformation($"Uploading File {fileName} to blob failed");
                throw;
            }
        }

        private static async Task<bool> GetResourceTaggerData()
        {
            try
            {
                _log.LogInformation($"Fetching Resource Tagger info from Data Explorer");
                ADXHelper adxHelper = new ADXHelper();
                dt_RSTagger = await adxHelper.GetResourceTaggerDataAsync();
                return true;
            }
            catch
            {
                throw;
            }
        }

        private static void CleanDataTable(ref DataTable dt, string TableName)
        {
            List<string> ColumnToKeep = new List<string>() { "SubscriptionName", "ResourceGroupName" };
            try
            {
                _log.LogInformation($"Data Cleaning in Progress for Table {TableName}");
                var toRemove = new List<DataColumn>();
                DataTable dttemp = dt;
                foreach (DataColumn column in dttemp.Columns)
                {
                    if (!ColumnToKeep.Any(name => column.ColumnName == name))
                    {
                        toRemove.Add(column);
                    }
                }
                toRemove.ForEach(col => dttemp.Columns.Remove(col));

                DataView view = new DataView(dttemp);
                DataTable distinctTable = view.ToTable(true);
                dt = distinctTable;
                if (TableName == "dt_CostTable")
                {
                    UpdateSubscriptionDatainCostTable();
                }
                DeleteEmptyResourceGroupRow(ref dt_costtable, "ResourceGroupName");
                DeleteEmptyResourceGroupRow(ref dt_RSTagger, "ResourceGroupName");
            }
            catch
            {
                throw;
            }
        }

        private static void UpdateSubscriptionDatainCostTable()
        {
            try
            {
                _log.LogInformation($"Updating Subscription data in costReport Table");
                foreach (DataRow row in dt_costtable.Rows)
                {
                    if (row["SubscriptionName"] != DBNull.Value)
                    {
                        string originalValue = row["SubscriptionName"].ToString();
                        row["SubscriptionName"] = originalValue.Substring(0, originalValue.IndexOf('('));
                    }
                }
            }
            catch
            {
                throw;
            }
        }

        private static void DeleteEmptyResourceGroupRow(ref DataTable dt, string columnName)
        {
            DataRow[] rowsToDelete = dt.Select($"{columnName} IS NULL OR {columnName} = '' OR {columnName} = ' '");

            // Delete the filtered rows
            foreach (DataRow row in rowsToDelete)
            {
                row.Delete();
            }

            // Accept changes to finalize the deletion
            dt.AcceptChanges();
        }

        private static DataTable GetNewlyCreatedResource()
        {
            try
            {
                _log.LogInformation($"Getting newly Created Resource Group...");
                var result = from t1 in dt_costtable.AsEnumerable()
                             join t2 in dt_RSTagger.AsEnumerable()
                             on new { Col1 = t1["SubscriptionName"].ToString().ToLower(), Col2 = t1["ResourceGroupName"].ToString().ToLower() }
                             equals new { Col1 = t2["SubscriptionName"].ToString().ToLower(), Col2 = t2["ResourceGroupName"].ToString().ToLower() } into temp
                             from t2 in temp.DefaultIfEmpty()
                             where t2 == null
                             select t1;
                DataTable resultTable = dt_costtable.Clone();
                foreach (var row in result)
                {
                    resultTable.ImportRow(row);
                }

                return resultTable;
            }
            catch
            {
                throw;
            }
        }

        private static async Task SendMessageOnTeams(DataTable dt)
        {
            try
            {
                var helper = new Helper();
                _log.LogInformation($"Sending Message on Teams...");
                var result = await helper.SendMessageOnTeamsAsync(dt) ? "Message sent successfully." : "Error sending message: ";
                _log.LogInformation(result);
            }
            catch
            {
                _log.LogInformation($"Sending Message on teams failed...");
                throw;
            }
        }
    }
}
