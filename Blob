using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using AppLibrary;
using Azure.Storage.Blobs;
using ExcelDataReader;
using System.Net.Http.Headers;
using System.Net.Http;
using System.Text.Json;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Host;
using Microsoft.Extensions.Logging;
using System.Linq;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace fn_ResourceTagger
{
    public class fn_ResourceTagger_Blob
    {
        private static readonly string CLIENT_ID = Environment.GetEnvironmentVariable("CLIENT_ID");
        private static readonly string TENANT_ID = Environment.GetEnvironmentVariable("TENANT_ID");
        private static readonly string AUTH_URL = Environment.GetEnvironmentVariable("AUTH_URL");
        private static readonly string RESOURCE = Environment.GetEnvironmentVariable("RESOURCE");
        private static readonly string COST_MANAGEMENT_URL = Environment.GetEnvironmentVariable("COST_MANAGEMENT_URL");
        private static DataTable dt_costtable;
        private static DataTable dt_RSTagger;
        private static ILogger _log;

        [FunctionName("ResourceTagger_Blob")]
        public static async Task Run([BlobTrigger("costexportmanual/{name}.xlsx", Connection = "AzureWebJobsStorage")] Stream myBlob, string name, ILogger log)
        {
            Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
            _log = log;
            try
            {

                bool costReport = await GetCostDetails("Audit_AME_Preprod");
                bool resourceData = await GetResourceTaggerData();
                if (costReport && resourceData)
                {
                    CleanDataTable(ref dt_costtable, "dt_CostTable");
                    CleanDataTable(ref dt_RSTagger, "dt_RSTagger");

                    if (Convert.ToBoolean(Environment.GetEnvironmentVariable("BROADCAST_RESOURCE_DETAILS")))
                    {
                        var dt_result = GetNewlyCreatedResource();
                        if (dt_result.Rows.Count > 0)
                        {
                            CleanDataTable(ref dt_result, "dt_NewResourceTable");
                            bool isMsgSent = await SendMessageOnTeams(dt_result);
                            if (isMsgSent)
                            {
                                _log.LogInformation($"Message Sent on Teams Channel Successfully....");
                            }
                        }
                        else
                        {
                            _log.LogInformation($"No New Resource Group Found");
                        }

                    }
                    _log.LogInformation($"C# Blob trigger function Processed blob\n File_Name:{name} \n File_Size: {myBlob.Length} Bytes");
                }
               
            }
            catch (Exception ex)
            {
                _log.LogInformation($"Exception Message: {ex.Message}");
            }
        }

        private static async Task<bool> GetCostDetails(string env)
        {
            _log.LogInformation("Fetching CostReport Data");
            string accessToken = await GetAccessToken();
            if (string.IsNullOrEmpty(accessToken))
            {
                throw new Exception("Invalid AccessToken");
            }

            var generic = new GenericClass();
            var newdata = generic.GetRequestBody();
            var content = new StringContent(newdata, Encoding.UTF8, "application/json");

            using (var client = new HttpClient())
            {
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
                client.DefaultRequestHeaders.Add("X-Ms-Command-Name", "CostAnalysis");

                try
                {
                    var response = await client.PostAsync(COST_MANAGEMENT_URL.Replace("{Environment}", env), content).ConfigureAwait(false);

                    if (response.IsSuccessStatusCode)
                    {
                        var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                        var result = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var costAnalysis = System.Text.Json.JsonSerializer.Deserialize<CostAnalysis>(result, options);
                        _log.LogInformation("Fetched Cost Report Data..");
                        return await CreateCostReport(costAnalysis);
                    }
                    else
                    {
                        return false;
                    }
                }
                catch
                {
                    throw;
                }
            }

        }

        private static async Task<string> GetAccessToken()
        {
            var kvHelper = new KeyVaultHelper();
            _log.LogInformation("Getting Access Token....");
            var data = new Dictionary<string, string>
                                                    {
                                                        { "grant_type", "client_credentials" },
                                                        { "client_id", CLIENT_ID },
                                                        { "client_secret", await kvHelper.GetKeyValue("ClientSecret") },
                                                        { "resource", RESOURCE }
                                                    };
            var content = new FormUrlEncodedContent(data);
            using (var client = new HttpClient())
            {
                try
                {
                    var response = await client.PostAsync(AUTH_URL.Replace("{TenantID}", TENANT_ID), content).ConfigureAwait(false);
                    if (response.IsSuccessStatusCode)
                    {
                        var result = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                        var token = System.Text.Json.JsonSerializer.Deserialize<Token>(result);
                        _log.LogInformation($"Token acquired, Length {token.access_token.Length}....");
                        return token.access_token;
                    }
                    else
                    {
                        return string.Empty;
                    }
                }
                catch
                {
                    throw;
                }
            }
        }

        private static async Task<bool> CreateCostReport(CostAnalysis _obj)
        {
            try
            {
                _log.LogInformation("Creating CostReport....");
                dt_costtable = new DataTable();
                var sb = new StringBuilder();

                // Add columns to DataTable and append column names to StringBuilder
                var columnNames = _obj.Properties.Columns.Select(col => col.Name).ToArray();
                foreach (var colName in columnNames)
                {
                    dt_costtable.Columns.Add(new DataColumn(colName));
                }
                sb.AppendLine(string.Join(",", columnNames));

                // Add rows to DataTable and append row values to StringBuilder
                foreach (var row in _obj.Properties.Rows)
                {
                    var dr = dt_costtable.NewRow();
                    for (int j = 0; j < row.Length; j++)
                    {
                        dr[j] = row[j].ToString();
                    }
                    dt_costtable.Rows.Add(dr);
                    sb.AppendLine(string.Join(",", row.Select(cell => cell.ToString())));
                }
                await UploadFileToBlob(Encoding.ASCII.GetBytes(sb.ToString()));
                return true;
            }
            catch
            {
                throw;
            }
        }

        private static async Task<bool> UploadFileToBlob(byte[] buffer)
        {
            string fileName = DateTime.Today.AddDays(-1).ToString("yyyy-MM-dd") + ".csv";
            try
            {
                _log.LogInformation($"Uploading File {fileName} to blob");
                BlobClient blobclient = BlobHelper.GetContainerClient().GetBlobClient(fileName);
                bool exists = await blobclient.ExistsAsync();
                if (exists)
                {
                    _log.LogInformation($"File {fileName} already exists, deleting the existing file....");
                    await blobclient.DeleteIfExistsAsync();
                    _log.LogInformation($"Uploading new file {fileName}");
                }
                using (var ms = new MemoryStream(buffer, true))
                {
                    await blobclient.UploadAsync(ms);
                }
                return true;
            }
            catch
            {
                _log.LogInformation($"Uploading File {fileName} to blob failed");
                throw;
            }
        }

        private static async Task<bool> GetResourceTaggerData()
        {
            try
            {
                _log.LogInformation($"Fetching Resource Tagger info from Blob");
                BlobClient blobclient = BlobHelper.GetContainerClient().GetBlobClient("Resource_Group_Tagger.xlsx");
                using (var ms = new MemoryStream())
                {
                    await blobclient.DownloadToAsync(ms);
                    ms.Position = 0;
                    ReadExcelFileToTable(ms);
                    //FileStream outputStream = new FileStream(@"C:\\Users\\sudeol\\source\\Output.xlsx", FileMode.Create, FileAccess.Write);
                    //ms.CopyTo(outputStream);
                }
                return true;
            }
            catch
            {
                throw;
            }
        }

        private static void ReadExcelFileToTable(Stream stream)
        {
            try
            {
                _log.LogInformation($"Loading Resource Tagger info to DataTable...");
                using (var reader = ExcelReaderFactory.CreateReader(stream))
                {
                    var result = reader.AsDataSet();
                    DataTable originalDataTable = result.Tables[0];
                    dt_RSTagger = new DataTable();
                    for (int i = 0; i < originalDataTable.Columns.Count; i++)
                    {
                        dt_RSTagger.Columns.Add(originalDataTable.Rows[0][i].ToString());
                    }

                    for (int i = 1; i < originalDataTable.Rows.Count; i++)
                    {
                        dt_RSTagger.Rows.Add(originalDataTable.Rows[i].ItemArray);
                    }
                }
                dt_RSTagger.Columns["SUBSCRIPTION"].ColumnName = "SubscriptionName";
                dt_RSTagger.Columns["RESOURCE GROUP NAME"].ColumnName = "ResourceGroupName";
            }
            catch
            {
                throw;
            }
        }

        private static void CleanDataTable(ref DataTable dt, string TableName)
        {
            List<string> ColumnToKeep = new List<string>() { "SubscriptionName", "ResourceGroupName" };
            try
            {
                _log.LogInformation($"Data Cleaning in Progress for Table {TableName}");
                var toRemove = new List<DataColumn>();
                DataTable dttemp = dt;
                foreach (DataColumn column in dttemp.Columns)
                {
                    if (!ColumnToKeep.Any(name => column.ColumnName == name))
                    {
                        toRemove.Add(column);
                    }
                }
                toRemove.ForEach(col => dttemp.Columns.Remove(col));

                DataView view = new DataView(dttemp);
                DataTable distinctTable = view.ToTable(true);
                dt = distinctTable;
                if (TableName == "dt_CostTable")
                {
                    UpdateSubscriptionDatainCostTable();
                }
                DeleteEmptyResourceGroupRow(ref dt_costtable, "ResourceGroupName");
                DeleteEmptyResourceGroupRow(ref dt_RSTagger, "ResourceGroupName");
            }
            catch
            {
                throw;
            }
        }

        private static void UpdateSubscriptionDatainCostTable()
        {
            try
            {
                _log.LogInformation($"Updating Subscription data in costReport Table");
                foreach (DataRow row in dt_costtable.Rows)
                {
                    if (row["SubscriptionName"] != DBNull.Value)
                    {
                        string originalValue = row["SubscriptionName"].ToString();
                        row["SubscriptionName"] = originalValue.Substring(0, originalValue.IndexOf('('));
                    }
                }
            }
            catch
            {
                throw;
            }
        }

        private static void DeleteEmptyResourceGroupRow(ref DataTable dt, string columnName)
        {
            DataRow[] rowsToDelete = dt.Select($"{columnName} IS NULL OR {columnName} = '' OR {columnName} = ' '");

            // Delete the filtered rows
            foreach (DataRow row in rowsToDelete)
            {
                row.Delete();
            }

            // Accept changes to finalize the deletion
            dt.AcceptChanges();
        }

        private static DataTable GetNewlyCreatedResource()
        {
            try
            {
                _log.LogInformation($"Getting newly Created Resource Group...");
                var result = from t1 in dt_costtable.AsEnumerable()
                             join t2 in dt_RSTagger.AsEnumerable()
                             on new { Col1 = t1["SubscriptionName"].ToString().ToLower(), Col2 = t1["ResourceGroupName"].ToString().ToLower() }
                             equals new { Col1 = t2["SubscriptionName"].ToString().ToLower(), Col2 = t2["ResourceGroupName"].ToString().ToLower() } into temp
                             from t2 in temp.DefaultIfEmpty()
                             where t2 == null
                             select t1;
                DataTable resultTable = dt_costtable.Clone();
                foreach (var row in result)
                {
                    resultTable.ImportRow(row);
                }

                return resultTable;
            }
            catch
            {
                throw;
            }
        }

        private static async Task<bool> SendMessageOnTeams(DataTable dt)
        {
            try
            {
                _log.LogInformation($"Sending Message on Teams...");
                var _generic = new GenericClass();
                string csvdata = _generic.ConvertDataTableToMarkdownTable(dt).ToString();

                using (HttpClient client = new HttpClient())
                {
                    var payload = new
                    {
                        text = csvdata
                    };

                    string jsonPayload = Newtonsoft.Json.JsonConvert.SerializeObject(payload);
                    StringContent content = new StringContent(jsonPayload, Encoding.UTF8, "application/json");

                    HttpResponseMessage response = await client.PostAsync(Environment.GetEnvironmentVariable("WEBHOOK_URL"), content);
                    if (response.IsSuccessStatusCode)
                    {
                        Console.WriteLine("Message sent successfully.");
                    }
                    else
                    {
                        Console.WriteLine("Error sending message: " + response.StatusCode);
                    }
                }


                // Read the CSV file and convert it to a base64 string
                //string base64Csv = Convert.ToBase64String(Encoding.ASCII.GetBytes(csvdata.ToString()));

                //// Send the payload to the Teams webhook
                //using (HttpClient client = new HttpClient())
                //{
                //    var content = new StringContent(_generic.GetPayloadForTeam(base64Csv), Encoding.UTF8, "application/json");
                //    HttpResponseMessage response = await client.PostAsync(Environment.GetEnvironmentVariable("WEBHOOK_URL"), content);
                //    if (response.IsSuccessStatusCode)
                //    {
                //        Console.WriteLine("Message sent successfully.");
                //    }
                //    else
                //    {
                //        Console.WriteLine("Failed to send message. Status code: " + response.StatusCode);
                //    }
                //}
                return true;
            }
            catch
            {
                _log.LogInformation($"Sending Message on teams failed...");
                throw;
            }
        }
    }
}
